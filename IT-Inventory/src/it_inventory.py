# -*- coding: utf-8 -*-
"""
IT-INVENTORY v2.0
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–æ—á–µ—á–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã

–ê–≤—Ç–æ—Ä –∏–¥–µ–∏ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö—Ä—é–∫–æ–≤ (Kryukov{}Dev)
–ü—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT License

Telegram: https://t.me/it_tools_rus
GitHub: https://github.com/KryukovDev/IT-Tools-RUS
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import wmi
import os
import platform
from datetime import datetime
import glob
import json
import csv
import webbrowser

# =============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´ –°–¢–ò–õ–Ø
# =============================================================================

class AppStyle:
    """–°—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è IT-—É—Ç–∏–ª–∏—Ç"""
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
    COLORS = {
        'bg_main': '#1a1a2e',
        'bg_secondary': '#162447',  
        'bg_tertiary': '#0f3460',
        'accent_primary': '#e94560',
        'accent_secondary': '#533483',
        'text_primary': '#ffffff',
        'text_secondary': '#b8b8b8',
        'success': '#4ec9b0',
        'warning': '#ffcc00',
        'error': '#f44747'
    }
    
    # –®—Ä–∏—Ñ—Ç—ã
    FONTS = {
        'title': ('Segoe UI', 12, 'bold'),
        'heading': ('Segoe UI', 10, 'bold'),
        'main': ('Segoe UI', 9),
        'mono': ('Consolas', 9),
        'small': ('Segoe UI', 8)
    }
    
    # –ò–∫–æ–Ω–∫–∏
    ICONS = {
        'pc': 'üñ•Ô∏è',
        'scan': 'üîç',
        'success': '‚úÖ',
        'error': '‚ùå',
        'warning': '‚ö†Ô∏è',
        'users': 'üë•',
        'monitor': 'üñ•Ô∏è',
        'disk': 'üíæ',
        'ram': 'üß†',
        'cpu': '‚ö°',
        'batch': 'üìä',
        'export': 'üìÅ',
        'clear': 'üóëÔ∏è'
    }

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–ò
# =============================================================================

def check_pc_online(computer_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ü–ö —á–µ—Ä–µ–∑ ping"""
    try:
        import subprocess
        result = subprocess.run(
            ["ping", "-n", "1", "-w", "1000", computer_name],
            capture_output=True,
            text=True
        )
        return result.returncode == 0
    except Exception as e:
        return False

def get_system_info(computer_name):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ —á–µ—Ä–µ–∑ WMI"""
    try:
        conn = wmi.WMI(computer=computer_name)
        
        # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä
        cpu_info = conn.Win32_Processor()[0]  
        cpu_name = cpu_info.Name.strip()
        
        # –ü–∞–º—è—Ç—å
        physical_memory = conn.Win32_PhysicalMemory()
        total_ram_gb = 0
        memory_modules = []
        
        if physical_memory:
            total_ram_gb = sum(int(mem.Capacity) for mem in physical_memory) // (1024**3)
            for mem in physical_memory:
                mem_size = int(mem.Capacity) // (1024**3)
                mem_type = mem.MemoryType
                if mem_type == 24: mem_type_str = "DDR3"
                elif mem_type == 26: mem_type_str = "DDR4"
                elif mem_type == 0: mem_type_str = "Unknown"
                else: mem_type_str = f"DDR({mem_type})"
                memory_modules.append(f"{mem_size}GB {mem_type_str}")
        else:
            memory_info = conn.Win32_ComputerSystem()[0]
            total_ram_bytes = int(memory_info.TotalPhysicalMemory)
            total_ram_gb = round(total_ram_bytes / (1024**3))
            memory_modules = ["–¢–∏–ø –ø–∞–º—è—Ç–∏: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"]

        # –î–∏—Å–∫–∏
        disks = []
        for disk in conn.Win32_LogicalDisk():
            if disk.DriveType == 3:
                size_gb = int(disk.Size) // (1024**3) if disk.Size else 0
                free_gb = int(disk.FreeSpace) // (1024**3) if disk.FreeSpace else 0
                disks.append(f"{disk.DeviceID} ({size_gb} GB, —Å–≤–æ–±–æ–¥–Ω–æ {free_gb} GB)")

        # –û–°
        os_info = conn.Win32_OperatingSystem()[0]
        os_name = os_info.Caption
        os_install_date = os_info.InstallDate
        if os_install_date:
            try:
                date_str = os_install_date.split('.')[0]
                install_date = datetime.strptime(date_str, "%Y%m%d%H%M%S")
                install_date_str = install_date.strftime("%d.%m.%Y")
            except:
                install_date_str = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
        else:
            install_date_str = "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

        # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞
        motherboard = conn.Win32_BaseBoard()[0]
        mobo_model = motherboard.Product
        mobo_manufacturer = motherboard.Manufacturer

        return {
            "computer_name": computer_name,
            "cpu": cpu_name,
            "ram_gb": total_ram_gb,
            "memory_modules": memory_modules,
            "disks": disks,
            "os_name": os_name,
            "os_install_date": install_date_str,
            "motherboard": f"{mobo_manufacturer} {mobo_model}",
        }
        
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ WMI: {e}"}

def get_users_info(computer_name):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É C:\\Users"""
    try:
        import subprocess
        users = []
        network_path = f"\\\\{computer_name}\\c$\\Users"
        
        result = subprocess.run(
            ["cmd", "/c", "dir", network_path], 
            capture_output=True, 
            text=True,
            encoding='cp866'
        )
        
        if result.returncode == 0:
            lines = result.stdout.split('\n')
            for line in lines:
                if '<DIR>' in line and not line.startswith('.'):
                    parts = line.split()
                    if len(parts) >= 4:
                        date_str = f"{parts[0]} {parts[1]}"
                        folder_name = parts[-1]
                        
                        system_folders = [".", "..", "Public", "Default", "All Users", "DefaultAppPool"]
                        if folder_name in system_folders:
                            continue
                        
                        try:
                            date_obj = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
                        except:
                            date_obj = datetime.now()
                            
                        users.append({
                            "name": folder_name,
                            "last_modified": date_str,
                            "raw_date": date_obj
                        })
        
        users.sort(key=lambda x: x["raw_date"], reverse=True)
        recent_users = users[:5]
        return recent_users
        
    except Exception as e:
        return [{"name": f"–û—à–∏–±–∫–∞: {e}", "last_modified": "N/A"}]

def get_monitors_info(computer_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö"""
    try:
        conn = wmi.WMI(computer=computer_name, namespace="root\\wmi")
        monitors = []
        
        try:
            for monitor in conn.WmiMonitorID():
                manufacturer = ""
                product = ""
                serial = ""
                
                if monitor.ManufacturerName:
                    manufacturer_bytes = bytearray()
                    for byte in monitor.ManufacturerName:
                        if byte > 0:
                            manufacturer_bytes.append(byte)
                    if manufacturer_bytes:
                        manufacturer = manufacturer_bytes.decode('utf-8', errors='ignore').strip()
                
                if monitor.ProductCodeID:
                    product_bytes = bytearray()
                    for byte in monitor.ProductCodeID:
                        if byte > 0:
                            product_bytes.append(byte)
                    if product_bytes:
                        product = product_bytes.decode('utf-8', errors='ignore').strip()
                
                diagonal = ""
                try:
                    for mon_info in conn.WmiMonitorBasicDisplayParams():
                        if hasattr(mon_info, 'MaxHorizontalImageSize') and mon_info.MaxHorizontalImageSize:
                            hor_cm = mon_info.MaxHorizontalImageSize
                            ver_cm = mon_info.MaxVerticalImageSize if hasattr(mon_info, 'MaxVerticalImageSize') else hor_cm * 9/16
                            diagonal_cm = (hor_cm**2 + ver_cm**2)**0.5
                            diagonal_inch = round(diagonal_cm / 2.54)
                            diagonal = f"{diagonal_inch}\""
                            break
                except:
                    pass
                
                monitor_name = manufacturer if manufacturer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                if product:
                    monitor_name += f" {product}"
                if diagonal:
                    monitor_name += f" ({diagonal})"
                elif serial:
                    monitor_name += f" [SN: {serial}]"
                
                monitors.append(monitor_name)
                
        except Exception as e:
            print(f"      WmiMonitorID –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        if not monitors:
            try:
                conn_standard = wmi.WMI(computer=computer_name)
                for monitor in conn_standard.Win32_PnPEntity(Description='Monitor'):
                    if monitor.Name:
                        monitors.append(monitor.Name)
            except Exception as e:
                print(f"      Win32_PnPEntity –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        unique_monitors = list(set(monitors))
        return unique_monitors if unique_monitors else ["–ú–æ–Ω–∏—Ç–æ—Ä—ã: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]
        
    except Exception as e:
        return [f"–û—à–∏–±–∫–∞: {e}"]

# =============================================================================
# GUI –û–°–ù–û–í–ù–û–ï –û–ö–ù–û
# =============================================================================

class ITInventoryGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("IT-Inventory v2.0")
        self.root.geometry("900x700")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
        self.style = AppStyle()
        self.root.configure(bg=self.style.COLORS['bg_main'])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
        self.setup_icon()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π ttk
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.load_history()

        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.batch_results = []

    def setup_icon(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–æ—é –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—à—É –∏–∫–æ–Ω–∫—É
            import os
            import sys
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
            if hasattr(sys, '_MEIPASS'):
                # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ exe (PyInstaller)
                icon_path = os.path.join(sys._MEIPASS, 'desktop.ico')
            else:
                # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
                icon_path = 'desktop.ico'
            
            if os.path.exists(icon_path):
                self.root.iconbitmap(icon_path)
                print(f"‚úÖ –ò–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {icon_path}")
            else:
                # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç - —É–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∏—Ç–æ–Ω–æ–≤—Å–∫—É—é
                self.root.iconbitmap('')
                print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ desktop.ico –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")
            # fallback - —É–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
            try:
                self.root.iconbitmap('')
            except:
                pass

    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ttk —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Notebook (–≤–∫–ª–∞–¥–æ–∫)
        style.configure('TNotebook', background=self.style.COLORS['bg_main'])
        style.configure('TNotebook.Tab', 
                       background=self.style.COLORS['bg_secondary'],
                       foreground=self.style.COLORS['text_secondary'],
                       padding=[15, 5],
                       font=self.style.FONTS['main'])
        style.map('TNotebook.Tab',
                 background=[('selected', self.style.COLORS['accent_primary'])],
                 foreground=[('selected', self.style.COLORS['text_primary'])])
        
    def create_custom_button(self, parent, text, command, accent_color=None):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if accent_color is None:
            accent_color = self.style.COLORS['accent_primary']
            
        btn = tk.Button(parent,
                       text=text,
                       command=command,
                       bg=self.style.COLORS['bg_tertiary'],
                       fg=self.style.COLORS['text_primary'],
                       activebackground=accent_color,
                       activeforeground=self.style.COLORS['text_primary'],
                       font=self.style.FONTS['main'],
                       relief='flat',
                       bd=0,
                       padx=15,
                       pady=6,
                       cursor='hand2')
        return btn

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg=self.style.COLORS['bg_main'])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(main_frame, bg=self.style.COLORS['bg_main'])
        title_frame.pack(fill=tk.X, pady=(0, 15))
        
        title_label = tk.Label(title_frame,
                              text=f"{self.style.ICONS['pc']} IT-Inventory v2.0",
                              font=self.style.FONTS['title'],
                              fg=self.style.COLORS['accent_primary'],
                              bg=self.style.COLORS['bg_main'])
        title_label.pack()
        
        subtitle_label = tk.Label(title_frame,
                                 text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–æ—á–µ—á–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
                                 font=self.style.FONTS['small'],
                                 fg=self.style.COLORS['text_secondary'],
                                 bg=self.style.COLORS['bg_main'])
        subtitle_label.pack()
        
        # –í–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_single_tab()
        self.create_batch_tab()
        self.create_about_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()
        
    def create_single_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        single_frame = ttk.Frame(self.notebook)
        self.notebook.add(single_frame, text=f"{self.style.ICONS['scan']} –û–¥–∏–Ω–æ—á–Ω—ã–π –ü–ö")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        input_frame = tk.Frame(single_frame, bg=self.style.COLORS['bg_main'])
        input_frame.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Label(input_frame, text="–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:", 
                bg=self.style.COLORS['bg_main'], 
                fg=self.style.COLORS['text_primary'],
                font=self.style.FONTS['main']).pack(side=tk.LEFT, padx=(0, 10))
        
        self.single_pc_entry = ttk.Combobox(input_frame, 
                                          width=30, 
                                          font=self.style.FONTS['main'],
                                          values=[])
        self.single_pc_entry.pack(side=tk.LEFT, padx=(0, 10))
        self.single_pc_entry.bind('<Return>', lambda e: self.scan_single_pc())
        
        scan_btn = self.create_custom_button(input_frame,
                                           f"{self.style.ICONS['scan']} –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
                                           self.scan_single_pc)
        scan_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        export_btn = self.create_custom_button(input_frame,
                                             f"{self.style.ICONS['export']} –≠–∫—Å–ø–æ—Ä—Ç –≤ TXT",
                                             self.export_single_report,
                                             self.style.COLORS['success'])
        export_btn.pack(side=tk.LEFT)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_frame = tk.Frame(single_frame, bg=self.style.COLORS['bg_main'])
        result_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.single_result_text = scrolledtext.ScrolledText(result_frame,
                                                          height=20,
                                                          font=self.style.FONTS['mono'],
                                                          bg=self.style.COLORS['bg_secondary'],
                                                          fg=self.style.COLORS['text_primary'],
                                                          insertbackground=self.style.COLORS['accent_primary'],
                                                          selectbackground=self.style.COLORS['accent_secondary'],
                                                          relief='flat',
                                                          padx=10,
                                                          pady=10)
        self.single_result_text.pack(fill=tk.BOTH, expand=True)
        
    def create_batch_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        batch_frame = ttk.Frame(self.notebook)
        self.notebook.add(batch_frame, text=f"{self.style.ICONS['batch']} –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
        
        # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ü–ö
        input_frame = tk.Frame(batch_frame, bg=self.style.COLORS['bg_main'])
        input_frame.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Label(input_frame, 
                text="–°–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
                bg=self.style.COLORS['bg_main'],
                fg=self.style.COLORS['text_primary'],
                font=self.style.FONTS['main']).pack(anchor=tk.W)
        
        self.batch_pc_text = scrolledtext.ScrolledText(input_frame,
                                                     height=6,
                                                     font=self.style.FONTS['mono'],
                                                     bg=self.style.COLORS['bg_secondary'],
                                                     fg=self.style.COLORS['text_primary'],
                                                     insertbackground=self.style.COLORS['accent_primary'])
        self.batch_pc_text.pack(fill=tk.X, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = tk.Frame(input_frame, bg=self.style.COLORS['bg_main'])
        btn_frame.pack(fill=tk.X)
        
        scan_batch_btn = self.create_custom_button(btn_frame,
                                                  f"{self.style.ICONS['scan']} –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                                                  self.scan_batch_pcs)
        scan_batch_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        export_batch_btn = self.create_custom_button(btn_frame,
                                                    f"{self.style.ICONS['export']} –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                                                    self.export_batch_csv,
                                                    self.style.COLORS['success'])
        export_batch_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        clear_btn = self.create_custom_button(btn_frame,
                                             f"{self.style.ICONS['clear']} –û—á–∏—Å—Ç–∏—Ç—å",
                                             self.clear_batch_text,
                                             self.style.COLORS['error'])
        clear_btn.pack(side=tk.LEFT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(btn_frame, 
                                          variable=self.progress_var,
                                          maximum=100)
        self.progress_bar.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(20, 0))
        
        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.batch_result_text = scrolledtext.ScrolledText(batch_frame,
                                                         height=15,
                                                         font=self.style.FONTS['mono'],
                                                         bg=self.style.COLORS['bg_secondary'],
                                                         fg=self.style.COLORS['text_primary'])
        self.batch_result_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
    def create_about_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'"""
        about_frame = ttk.Frame(self.notebook)
        self.notebook.add(about_frame, text=f"{self.style.ICONS['pc']} –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        
        about_text = f"""
{self.style.ICONS['pc']} IT-Inventory v2.0

–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ 
–≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏. –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∫–∞–Ω–µ—Ä–æ–º —Å–µ—Ç–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è 
–∑–Ω–∞–Ω–∏–µ –∏–º–µ–Ω —Ü–µ–ª–µ–≤—ã—Ö –ü–ö.

{self.style.ICONS['success']} –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –¢–æ—á–µ—á–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–º–µ–Ω–∞–º –ü–ö
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ ({self.style.ICONS['cpu']}–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, {self.style.ICONS['ram']}–ø–∞–º—è—Ç—å, {self.style.ICONS['disk']}–¥–∏—Å–∫–∏)
‚Ä¢ –°–≤–µ–¥–µ–Ω–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö –∏ –∏—Ö –¥–∏–∞–≥–æ–Ω–∞–ª—è—Ö
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
‚Ä¢ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ü–ö
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ TXT –∏ CSV

{self.style.ICONS['scan']} –¢–ï–•–ù–û–õ–û–ì–ò–ò:
‚Ä¢ Python 3.x + WMI + tkinter
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Å–µ—Ç–µ–≤—ã–º–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏  
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Windows 7/8/10/11

{self.style.ICONS['users']} –ê–í–¢–û–†–°–¢–í–û:
–ê–≤—Ç–æ—Ä –∏–¥–µ–∏ –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö—Ä—é–∫–æ–≤ (Kryukov{{}}Dev)
–ü—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤

–í–µ—Ä—Å–∏—è: 2.0
–ì–æ–¥: 2025

{self.style.ICONS['warning']} –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
1. –î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ü–ö –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–º—è –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
2. –î–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ü–ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
3. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Å–æ–±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ

{self.style.ICONS['error']} –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Ü–µ–ª–µ–≤—ã–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –ø–æ —Å–µ—Ç–∏
‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WMI –Ω–∞ —Ü–µ–ª–µ–≤—ã—Ö –ü–ö
"""
        
        about_text_widget = scrolledtext.ScrolledText(about_frame,
                                                    font=self.style.FONTS['main'],
                                                    bg=self.style.COLORS['bg_secondary'],
                                                    fg=self.style.COLORS['text_primary'],
                                                    padx=15,
                                                    pady=15)
        about_text_widget.pack(fill=tk.BOTH, expand=True)
        about_text_widget.insert(tk.END, about_text)
        about_text_widget.configure(state='disabled')
        
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        status_frame = tk.Frame(self.root, 
                               bg=self.style.COLORS['bg_tertiary'], 
                               relief=tk.FLAT, 
                               height=22)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        status_frame.pack_propagate(False)
        
        # –ê–≤—Ç–æ—Ä—Å—Ç–≤–æ —Å–ª–µ–≤–∞
        author_label = tk.Label(status_frame, 
                               text="–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö—Ä—é–∫–æ–≤, 2025 | IT-Tools-RUS",
                               bg=self.style.COLORS['bg_tertiary'],
                               fg=self.style.COLORS['text_secondary'],
                               font=self.style.FONTS['small'])
        author_label.pack(side=tk.LEFT, padx=10, pady=2)
        
        # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–ø—Ä–∞–≤–∞
        link_label = tk.Label(status_frame, 
                             text="üì¢ t.me/it_tools_rus", 
                             bg=self.style.COLORS['bg_tertiary'],
                             fg=self.style.COLORS['accent_primary'],
                             font=self.style.FONTS['small'],
                             cursor="hand2")
        link_label.pack(side=tk.RIGHT, padx=10, pady=2)
        link_label.bind("<Button-1>", lambda e: webbrowser.open("https://t.me/it_tools_rus"))
        
    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        try:
            if os.path.exists('scan_history.json'):
                with open('scan_history.json', 'r', encoding='utf-8') as f:
                    history = json.load(f)
                    self.single_pc_entry['values'] = history
        except:
            pass
            
    def save_to_history(self, pc_name):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            history = list(self.single_pc_entry['values'])
            if pc_name not in history:
                history.insert(0, pc_name)
                history = history[:20]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
                
            with open('scan_history.json', 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False)
                
            self.single_pc_entry['values'] = history
        except:
            pass

    def scan_single_pc(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ü–ö"""
        pc_name = self.single_pc_entry.get().strip()
        if not pc_name:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
            return
        
        self.single_result_text.delete(1.0, tk.END)
        self.single_result_text.insert(tk.END, f"{self.style.ICONS['scan']} –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {pc_name}...\n\n")
        self.root.update()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            if not check_pc_online(pc_name):
                self.single_result_text.insert(tk.END, f"{self.style.ICONS['error']} –ö–æ–º–ø—å—é—Ç–µ—Ä {pc_name} –Ω–µ –≤ —Å–µ—Ç–∏!\n")
                return
            
            # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            system_info = get_system_info(pc_name)
            users_info = get_users_info(pc_name)
            monitors_info = get_monitors_info(pc_name)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.save_to_history(pc_name)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.display_single_results(system_info, users_info, monitors_info)
            
        except Exception as e:
            self.single_result_text.insert(tk.END, f"{self.style.ICONS['error']} –û—à–∏–±–∫–∞: {e}\n")

    def display_single_results(self, system, users, monitors):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.single_result_text.delete(1.0, tk.END)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if 'error' in system:
            self.single_result_text.insert(tk.END, f"{self.style.ICONS['error']} –û–®–ò–ë–ö–ê: {system['error']}\n\n")
            return
        
        self.single_result_text.insert(tk.END, f"{self.style.ICONS['success']} –û–¢–ß–ï–¢ IT-–ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–ò\n")
        self.single_result_text.insert(tk.END, "="*50 + "\n\n")
        
        self.single_result_text.insert(tk.END, f"{self.style.ICONS['pc']} –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n")
        self.single_result_text.insert(tk.END, f"   –ö–æ–º–ø—å—é—Ç–µ—Ä: {system.get('computer_name', 'N/A')}\n")
        self.single_result_text.insert(tk.END, f"   –ú–∞—Ç.–ø–ª–∞—Ç–∞: {system.get('motherboard', 'N/A')}\n")
        self.single_result_text.insert(tk.END, f"   {self.style.ICONS['cpu']} –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {system.get('cpu', 'N/A')}\n")
        self.single_result_text.insert(tk.END, f"   {self.style.ICONS['ram']} –ü–∞–º—è—Ç—å: {system.get('ram_gb', 'N/A')} GB\n")
        
        self.single_result_text.insert(tk.END, "   –ú–æ–¥—É–ª–∏ –ø–∞–º—è—Ç–∏:\n")
        for module in system.get('memory_modules', []):
            self.single_result_text.insert(tk.END, f"     ‚Ä¢ {module}\n")
            
        self.single_result_text.insert(tk.END, f"   –û–°: {system.get('os_name', 'N/A')}\n")
        self.single_result_text.insert(tk.END, f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {system.get('os_install_date', 'N/A')}\n")
        
        self.single_result_text.insert(tk.END, f"   {self.style.ICONS['disk']} –î–∏—Å–∫–∏:\n")
        for disk in system.get('disks', []):
            self.single_result_text.insert(tk.END, f"     ‚Ä¢ {disk}\n")
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.single_result_text.insert(tk.END, f"\n{self.style.ICONS['users']} –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò (—Ç–æ–ø-5):\n")
        if users and isinstance(users, list):
            for i, user in enumerate(users[:5], 1):
                if isinstance(user, dict) and 'name' in user:
                    self.single_result_text.insert(tk.END, f"   {i}. {user['name']} - {user.get('last_modified', 'N/A')}\n")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä—ã
        self.single_result_text.insert(tk.END, f"\n{self.style.ICONS['monitor']} –ú–û–ù–ò–¢–û–†–´:\n")
        for i, monitor in enumerate(monitors, 1):
            self.single_result_text.insert(tk.END, f"   {i}. {monitor}\n")
        
        self.single_result_text.insert(tk.END, f"\n{self.style.ICONS['success']} –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n")

    def scan_batch_pcs(self):
        """–ü–∞–∫–µ—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤"""
        pc_text = self.batch_pc_text.get(1.0, tk.END).strip()
        if not pc_text:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤")
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ü–ö
        pc_list = []
        for line in pc_text.split('\n'):
            pcs = [pc.strip() for pc in line.split(',') if pc.strip()]
            pc_list.extend(pcs)
        
        if not pc_list:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∏–º–µ–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤")
            return
        
        self.batch_result_text.delete(1.0, tk.END)
        self.batch_result_text.insert(tk.END, f"{self.style.ICONS['scan']} –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {len(pc_list)} –ü–ö...\n\n")
        self.root.update()
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.batch_results = []
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ü–ö
        success_count = 0
        self.progress_var.set(0)
        
        for i, pc_name in enumerate(pc_list, 1):
            self.batch_result_text.insert(tk.END, f"üìã [{i}/{len(pc_list)}] {pc_name}... ")
            self.root.update()
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress = (i / len(pc_list)) * 100
                self.progress_var.set(progress)
                
                if not check_pc_online(pc_name):
                    self.batch_result_text.insert(tk.END, f"{self.style.ICONS['error']} –Ω–µ –≤ —Å–µ—Ç–∏\n")
                    self.batch_results.append({
                        'computer_name': pc_name,
                        'status': 'offline',
                        'cpu': 'N/A',
                        'ram_gb': 'N/A',
                        'monitors': 'N/A'
                    })
                    continue
                
                system_info = get_system_info(pc_name)
                monitors_info = get_monitors_info(pc_name)
                
                if 'error' not in system_info:
                    monitors_str = ", ".join(monitors_info) if monitors_info else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    self.batch_result_text.insert(tk.END, f"{self.style.ICONS['success']} {system_info.get('cpu', 'N/A')}, {system_info.get('ram_gb', 'N/A')}GB RAM | –ú–æ–Ω–∏—Ç–æ—Ä—ã: {monitors_str}\n")
                    success_count += 1
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    self.batch_results.append({
                        'computer_name': pc_name,
                        'status': 'success',
                        'cpu': system_info.get('cpu', 'N/A'),
                        'ram_gb': system_info.get('ram_gb', 'N/A'),
                        'os_name': system_info.get('os_name', 'N/A'),
                        'monitors': monitors_str,
                        'motherboard': system_info.get('motherboard', 'N/A')
                    })
                else:
                    self.batch_result_text.insert(tk.END, f"{self.style.ICONS['error']} –æ—à–∏–±–∫–∞\n")
                    self.batch_results.append({
                        'computer_name': pc_name,
                        'status': 'error',
                        'cpu': 'N/A',
                        'ram_gb': 'N/A',
                        'monitors': 'N/A'
                    })
                    
            except Exception as e:
                self.batch_result_text.insert(tk.END, f"{self.style.ICONS['error']} –æ—à–∏–±–∫–∞: {e}\n")
                self.batch_results.append({
                    'computer_name': pc_name,
                    'status': 'error',
                    'cpu': 'N/A', 
                    'ram_gb': 'N/A',
                    'monitors': 'N/A'
                })
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.batch_result_text.insert(tk.END, f"\n{self.style.ICONS['success']} –ò–¢–û–ì: –£—Å–ø–µ—à–Ω–æ {success_count}/{len(pc_list)} –ü–ö\n")
        self.progress_var.set(100)

    def export_single_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ TXT"""
        content = self.single_result_text.get(1.0, tk.END)
        if not content.strip():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        try:
            filename = f"inventory_single_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def export_batch_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ CSV"""
        if not self.batch_results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            return
            
        try:
            filename = f"inventory_batch_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            with open(filename, 'w', newline='', encoding='utf-8-sig') as csvfile:
                fieldnames = ['computer_name', 'status', 'cpu', 'ram_gb', 'os_name', 'motherboard', 'monitors']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
                
                writer.writeheader()
                for result in self.batch_results:
                    writer.writerow(result)
                    
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"CSV –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV —Ñ–∞–π–ª: {e}")

    def clear_batch_text(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π"""
        self.batch_pc_text.delete(1.0, tk.END)
        self.batch_result_text.delete(1.0, tk.END)
        self.progress_var.set(0)
        self.batch_results = []

# =============================================================================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =============================================================================

if __name__ == "__main__":
    try:
        root = tk.Tk()
        app = ITInventoryGUI(root)
        root.mainloop()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")