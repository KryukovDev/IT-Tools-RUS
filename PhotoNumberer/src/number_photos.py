"""
PhotoNumberer v2.0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

Copyright (c) 2025 –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö—Ä—é–∫–æ–≤ (Kryukov{}Dev)
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT License

Telegram: https://t.me/it_tools_rus
GitHub: https://github.com/KryukovDev/IT-Tools-RUS
"""

import os
import tkinter as tk
from tkinter import ttk, filedialog, scrolledtext, messagebox
from PIL import Image, ImageDraw, ImageFont, ImageTk
import platform
from threading import Thread
from datetime import datetime
import webbrowser
import sys
import tempfile

def resource_path(relative_path):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É. –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è dev –∏ –¥–ª—è PyInstaller"""
    try:
        # PyInstaller —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ —Ö—Ä–∞–Ω–∏—Ç –ø—É—Ç—å –≤ _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    
    return os.path.join(base_path, relative_path)

class PhotoNumbererApp:
    def __init__(self, root):
        self.root = root
        self.root.title("PhotoNumberer v2.0")
        self.root.geometry("800x650")
        self.root.minsize(700, 600)

        self.root.iconbitmap(resource_path("icon.ico"))
        
        # –°—Ç–∏–ª—å
        self.style = ttk.Style()
        self.style.configure('TFrame', background='#f0f0f0')
        self.style.configure('TLabel', background='#f0f0f0')
        self.style.configure('Header.TLabel', background='#2c3e50', foreground='white', font=('Arial', 12, 'bold'))
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.source_folder = tk.StringVar()
        self.output_folder = tk.StringVar(value=os.path.join(os.getcwd(), "numbered_photos"))
        self.start_number = tk.IntVar(value=1)
        self.position = tk.StringVar(value="bottom_center")
        self.overwrite = tk.BooleanVar(value=False)
        self.font_size = tk.IntVar(value=50)
        
        self.create_widgets()
        self.setup_fonts()
        
    def setup_fonts(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        if platform.system() == "Windows":
            self.font_path = "C:/Windows/Fonts/arialbd.ttf"  # –ñ–∏—Ä–Ω—ã–π Arial
        elif platform.system() == "Darwin":  # macOS
            self.font_path = "/Library/Fonts/Arial Bold.ttf"
        else:  # Linux
            self.font_path = "/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf"
        
    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        
        ttk.Label(header_frame, text="üñºÔ∏è PhotoNumberer", style='Header.TLabel', 
                 anchor='center').pack(fill=tk.X, padx=5, pady=5)
        
        # –§—Ä–µ–π–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        settings_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
        ttk.Label(settings_frame, text="–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞:").grid(row=0, column=0, sticky=tk.W, pady=2)
        ttk.Entry(settings_frame, textvariable=self.source_folder, width=50).grid(row=0, column=1, padx=5)
        ttk.Button(settings_frame, text="–û–±–∑–æ—Ä...", command=self.browse_source).grid(row=0, column=2)
        
        # –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
        ttk.Label(settings_frame, text="–í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞:").grid(row=1, column=0, sticky=tk.W, pady=2)
        ttk.Entry(settings_frame, textvariable=self.output_folder, width=50).grid(row=1, column=1, padx=5)
        ttk.Button(settings_frame, text="–û–±–∑–æ—Ä...", command=self.browse_output).grid(row=1, column=2)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ttk.Label(settings_frame, text="–ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:").grid(row=2, column=0, sticky=tk.W, pady=2)
        ttk.Spinbox(settings_frame, from_=1, to=9999, textvariable=self.start_number, width=10).grid(row=2, column=1, sticky=tk.W, padx=5)
        
        ttk.Label(settings_frame, text="–ü–æ–∑–∏—Ü–∏—è –Ω–æ–º–µ—Ä–∞:").grid(row=3, column=0, sticky=tk.W, pady=2)
        position_combo = ttk.Combobox(settings_frame, textvariable=self.position, 
                                     values=["bottom_center", "top_right", "top_left", "bottom_right"], 
                                     state="readonly", width=15)
        position_combo.grid(row=3, column=1, sticky=tk.W, padx=5)
        
        ttk.Checkbutton(settings_frame, text="–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã", 
                       variable=self.overwrite).grid(row=4, column=1, sticky=tk.W, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=10)
        
        self.run_button = ttk.Button(button_frame, text="üöÄ –ù–∞—á–∞—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é", 
                                   command=self.start_processing, style='Accent.TButton')
        self.run_button.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", 
                  command=self.open_output_folder).pack(side=tk.RIGHT, padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        log_frame = ttk.LabelFrame(main_frame, text="–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding="5")
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_area = scrolledtext.ScrolledText(log_frame, height=12, state="disabled", wrap=tk.WORD)
        self.log_area.pack(fill=tk.BOTH, expand=True)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(self.root, mode='indeterminate')
        self.progress.pack(side=tk.BOTTOM, fill=tk.X)

        self.create_footer()
    
    def create_footer(self):
        footer_frame = ttk.Frame(self.root)
        footer_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –±–µ–∑ –¢–ì)
        link_label = ttk.Label(footer_frame, 
                              text="üì¢ –ï—â–µ —É—Ç–∏–ª–∏—Ç—ã: t.me/it_tools_rus", 
                              foreground="blue",
                              cursor="hand2")
        link_label.pack(side=tk.RIGHT)
        link_label.bind("<Button-1>", lambda e: webbrowser.open("https://t.me/it_tools_rus"))
        
        ttk.Label(footer_frame, text="Kryukov{}Dev ¬© 2025", 
                 foreground="gray").pack(side=tk.LEFT)
        
    def browse_source(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ")
        if folder:
            self.source_folder.set(folder)
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
            suggested_output = os.path.join(folder, "numbered_photos")
            self.output_folder.set(suggested_output)
            
    def browse_output(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if folder:
            self.output_folder.set(folder)
            
    def log_message(self, message):
        """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        
        self.log_area.configure(state="normal")
        self.log_area.insert(tk.END, formatted_message + "\n")
        self.log_area.see(tk.END)
        self.log_area.configure(state="disabled")
        
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_area.configure(state="normal")
        self.log_area.delete(1.0, tk.END)
        self.log_area.configure(state="disabled")
        self.log_message("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
        
    def open_output_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ"""
        output_path = self.output_folder.get()
        if os.path.exists(output_path):
            os.startfile(output_path) if platform.system() == "Windows" else os.system(f'open "{output_path}"' if platform.system() == "Darwin" else f'xdg-open "{output_path}"')
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            
    def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.source_folder.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É!")
            return
            
        if not os.path.exists(self.source_folder.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
            
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.set_ui_state(False)
        self.progress.start(10)
        self.status_var.set("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
        self.log_message("=" * 50)
        self.log_message("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = Thread(target=self.process_photos, daemon=True)
        thread.start()
        
    def set_ui_state(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI"""
        state = "normal" if enabled else "disabled"
        self.run_button.config(state=state)
        
    def process_photos(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            success_count = self.number_photos(
                self.source_folder.get(),
                self.output_folder.get(),
                self.start_number.get(),
                self.position.get(),
                self.overwrite.get()
            )
            
            self.root.after(0, lambda: self.processing_finished(success_count))
            
        except Exception as e:
            self.root.after(0, lambda: self.processing_error(str(e)))
            
    def number_photos(self, folder_path, output_folder, start_number, position, overwrite=False):
        """–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ"""
        if not overwrite and not os.path.exists(output_folder):
            os.makedirs(output_folder)
        
        image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp']
        images = [f for f in os.listdir(folder_path) 
                 if os.path.splitext(f)[1].lower() in image_extensions]
        images.sort()
        
        self.root.after(0, lambda: self.log_message(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(images)} —Ñ–æ—Ç–æ"))
        
        success_count = 0
        
        for i, image_name in enumerate(images, start_number):
            try:
                image_path = os.path.join(folder_path, image_name)
                with Image.open(image_path) as img:
                    if img.mode != 'RGB':
                        img = img.convert('RGB')
                    
                    draw = ImageDraw.Draw(img)
                    
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                    font_size_actual = min(img.width, img.height) // 20
                    font_size_actual = max(font_size_actual, 30)
                    
                    try:
                        font = ImageFont.truetype(self.font_path, font_size_actual)
                    except:
                        font = ImageFont.load_default()
                    
                    text = str(i)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
                    try:
                        bbox = draw.textbbox((0, 0), text, font=font)
                        text_width = bbox[2] - bbox[0]
                        text_height = bbox[3] - bbox[1]
                    except:
                        text_width, text_height = draw.textsize(text, font=font)
                    
                    margin = min(img.width, img.height) // 30
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    if position == "bottom_center":
                        x = (img.width - text_width) // 2
                        y = img.height - text_height - margin
                    elif position == "top_right":
                        x = img.width - text_width - margin
                        y = margin
                    elif position == "top_left":
                        x = margin
                        y = margin
                    elif position == "bottom_right":
                        x = img.width - text_width - margin
                        y = img.height - text_height - margin
                    
                    # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                    bg_padding = margin // 2
                    draw.rectangle([
                        x - bg_padding, 
                        y - bg_padding // 2,
                        x + text_width + bg_padding, 
                        y + text_height + bg_padding // 2
                    ], fill="black")
                    
                    # –¢–µ–∫—Å—Ç
                    draw.text((x, y), text, fill="white", font=font)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    name, ext = os.path.splitext(image_name)
                    output_filename = f"{name}_{i:04d}{ext}" if overwrite else f"{i:04d}{ext}"
                    output_path = os.path.join(output_folder, output_filename)
                    
                    img.save(output_path, quality=95)
                    self.root.after(0, lambda n=image_name, o=output_filename: self.log_message(f"‚úÖ {n} ‚Üí {o}"))
                    success_count += 1
                    
            except Exception as e:
                self.root.after(0, lambda n=image_name, e=e: self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å {n}: {str(e)}"))
        
        return success_count
        
    def processing_finished(self, success_count):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.progress.stop()
        self.set_ui_state(True)
        self.status_var.set(f"–ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} —Ñ–æ—Ç–æ")
        self.log_message(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} —Ñ–æ—Ç–æ")
        self.log_message("=" * 50)
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} —Ñ–æ—Ç–æ")
        
    def processing_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"""
        self.progress.stop()
        self.set_ui_state(True)
        self.status_var.set("–û—à–∏–±–∫–∞!")
        self.log_message(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}")
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{error_msg}")

def main():
    root = tk.Tk()
    app = PhotoNumbererApp(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    root.update_idletasks()
    x = (root.winfo_screenwidth() - root.winfo_reqwidth()) // 2
    y = (root.winfo_screenheight() - root.winfo_reqheight()) // 2
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()